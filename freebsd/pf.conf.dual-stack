#Macros: define common values, so they can be referenced and changed easily.

# Interfaces
ext_if="tun0" #unifi PPPOE
int_if="em1"  #Internal Ethernet 
vm_if="vm-public" #VM interface
           
table <localnet> { lo0:network, $int_if:network } 

set limit { states 40000, frags 20000, src-nodes 20000 }

# Network traffic normalization
scrub in on { $ext_if } 

# Queueing: rule-based bandwidth control.

altq on tun0 priq bandwidth 100Mb queue { ack, dns, ssh_out, main }
queue ack priority 7
queue dns priority 6
queue ssh_out priority 4 priq(red)
queue main priq(default red)

#NAT IPv4 traffic on outgoing traffic
nat on $ext_if inet from <localnet> to any -> ($ext_if)

# Antispoof
antispoof for $ext_if

#block/pass rules
block in on $ext_if all

#DHCP6
pass in on $ext_if inet6 proto udp from any to ( $ext_if ) port dhcpv6-client
pass out on $ext_if inet6 proto udp from self to ( $ext_if ) port dhcpv6-server 
#pass inet6 proto icmp6 all icmp6-type {neighbradv, neighbrsol, routersol, routeradv}

#IPV6 pass all ICMP traffic
pass in quick proto icmp6 all

pass quick on { lo0, $int_if, $int2_if }

#traffic shaping queues for ipv4
pass out on $ext_if inet proto tcp queue(main, ack)
pass out on $ext_if inet proto { udp,icmp }
pass out on $ext_if inet proto { tcp,udp } to port domain \
	queue(dns)
pass out on $ext_if inet proto tcp to port ssh \
	queue(main, ssh_out)

#traffic shaping queues for ipv6
pass out on $ext_if inet6 proto tcp queue(main, ack)
pass out on $ext_if inet6 proto { udp,icmp6 }
pass out on $ext_if inet6 proto { tcp,udp } to port domain \
	queue(dns)
pass out on $ext_if inet6 proto tcp to port ssh \
	queue(main, ssh_out)
